{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","_ref","ref","message","isUser","username","react_default","a","createElement","className","concat","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","_useState","useState","_useState2","Object","slicedToArray","input","setInput","_useState3","_useState4","messages","setMessages","_useState5","_useState6","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","FormControl","InputLabel","Input","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","Send_default","react_flip_move_es","src_Message","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9c6083bb.chunk.js","sourcesContent":["import React  from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\nimport './Message.css';\r\nimport { forwardRef } from 'react'\r\n\r\n\r\nconst Message = forwardRef( ({message ,username}, ref) => {\r\n\r\n    const isUser = username === message.username ;\r\n\r\n    return (\r\n          <div ref={ref} className={`message ${isUser && `message__user`}`}>\r\n                 <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\r\n                    <CardContent>\r\n                        <Typography color=\"white\" variant=\"h5\" component=\"h2\">\r\n                        {!isUser && `${message.username || `Unkown User`}:`} {message.message}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n          </div>\r\n               \r\n       \r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBGeJYi5ze2tSvmuyjyhY7l0-fZbfk-78Y\",\r\n    authDomain: \"facebook-messenger-4524f.firebaseapp.com\",\r\n    databaseURL: \"https://facebook-messenger-4524f.firebaseio.com\",\r\n    projectId: \"facebook-messenger-4524f\",\r\n    storageBucket: \"facebook-messenger-4524f.appspot.com\",\r\n    messagingSenderId: \"802923543827\",\r\n    appId: \"1:802923543827:web:0d8d95e2dfcd0275516ee6\",\r\n    measurementId: \"G-0DJDKYVLFP\"\r\n});\r\nconst db = firebaseApp.firestore();\r\nexport default db;","import React,{useState ,useEffect} from 'react';\nimport { FormControl ,Input ,InputLabel} from '@material-ui/core';\nimport './App.css';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport {IconButton} from '@material-ui/core';\n\nfunction App() {\n  const [input,setInput] =useState('');\n  const [messages ,setMessages] = useState([]);\n  const [username,setUsername] = useState('');\n\n  useEffect(()=>{\n    db.collection('messages').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n      setMessages(snapshot.docs.map(doc=>({id:doc.id,message: doc.data()})))\n    })\n  },[])\n\n\n  useEffect(()=>{\n    setUsername(prompt('please enter your name'))\n  },[])\n\n\n  // All the logic to send messages in this function\n  const sendMessage = (event) =>{\n    event.preventDefault();\n    db.collection('messages').add({\n      message:input,\n      username:username,\n      timestamp :firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n   \n    setInput('');\n  }\n  return (\n    <div className=\"App\">\n      <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\"/>\n      <h1>ChitChat!!!!!!!!</h1>\n  <h2>Welcome {username}</h2>\n      <form className=\"app__form\">\n        <FormControl className=\"app__formcontrol\"> \n        <InputLabel >Enter a Message....</InputLabel>\n        <Input className=\"app__input\"  value={input} onChange={event => setInput(event.target.value)}/>\n\n        <IconButton className=\"app__iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={sendMessage}>\n        <SendIcon />\n        </IconButton>\n\n      \n        </FormControl>\n\n\n      </form>\n      <FlipMove>\n\n      {\n        messages.map(({id,message}) =>(\n        <Message key={id} username={username} message={message}/>\n        \n        ))\n      }\n\n      </FlipMove>\n      \n\n\n    </div>\n\n    \n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}